1. Given a Start Node and an End Node in a graph report if they are “necessarily connected”. This means that all paths from the start node lead to the end node. Report true all paths from start node lead to end node and false if at least one path does not lead to the end node. This is a directed graph which can have cycles 

Does anyone know how to solve this? I had it in my interview at Google in CA and I still cant solve it

2. [Google] Design Text Editor (Doubly Linked List) 
Build a text editor class with the following functions, 

moveCursorLeft(), 

moveCursorRight(), 

insertCharacter(char) //insert the char right before cursor 

backspace() //delete the char right before cursor 

Follow-up 
Implement undo() //undo the last edit. Can be called multiple times until all edits are cancelled. 

All functions above should take O(1) time. 

Example  

( '|' denotes where the cursor locates. 'text' shows what's been written to the text editor. ) 

Start with empty text 
text = "|" 

insertCharacter('a') 
text = "a|" 

insertCharacter('b') 
text = "ab|" 

insertCharacter('c') 
text = "abc|" 

moveCursorLeft() 
text = "ab|c" 

moveCursorLeft() 
text = "a|bc" 

backspace() 
text = "|bc" 

moveCursorLeft() 
text = "|bc" (nothing happens since cursor was on the leftmost position) 

undo() 
text = "a|bc" 

undo() 
text = "ab|c" 

undo() 
text = "abc|" 

undo() 
text = "ab|" 

undo() 
text = "a|"

3.  



ven a string s contains lowercase alphabet, find the length of the Longest common Prefix of all substrings in O(n) 

For example 

s = 'ababac' 

Then substrings are as follow: 

1: s(1, 6) = ababac 
2: s(2, 6) = babac 
3: s(3, 6) = abac 
4: s(4, 6) = bac 
5: s(5, 6) = ac 
6: s(6, 6) = c 

Now, The lengths of LCP of all substrings are as follow 

1: len(LCP(s(1, 6), s)) = 6 
2: len(LCP(s(2, 6), s)) = 0 
3: len(LCP(s(3, 6), s)) = 3 
4: len(LCP(s(4, 6), s)) = 0 
5: len(LCP(s(5, 6), s)) = 1 
6: len(LCP(s(6, 6), s)) = 0 

String contains only lowercase alphabates.

4. 
